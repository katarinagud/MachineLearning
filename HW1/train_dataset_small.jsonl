{"instructions": ["push r12", "push rbp", "push rbx", "test byte [rdi + 0x46] 1", "je 0x80003cf", "mov edx 0", "mov esi 0xf2", "mov edi 0", "call 0x80003cf", "mov rbp rdi", "mov r12d esi", "mov rbx rdi", "jmp 0x80003dd", "mov rbx rax", "mov rax qword [rbx + 0xd0]", "test rax rax", "je 0x80003ef", "test byte [rax + 0x48] 1", "je 0x80003da", "cmp qword [rbx + 0x10] 0", "je 0x8000418", "cmp rbx qword [0x080003fd]", "je 0x800040f", "mov rdi rbx", "call sym.snip", "mov rdi rbx", "call entry0", "mov rax qword [rbx + 0x10]", "jmp 0x800049f", "mov eax 0", "test r12b 1", "jne 0x800049f", "mov rdi rbx", "call 0x800042b", "test rax rax", "je 0x8000464", "test r12b 2", "jne 0x800045e", "mov rsi qword [rbx + 0x30]", "mov rdi qword [rbx + 0x10]", "mov edx 0", "call 0x8000448", "test eax eax", "je 0x800045e", "test r12b 4", "jne 0x800045e", "mov edi 1", "call 0x800045c", "jmp 0x8000464", "mov rax qword [rbx + 0x10]", "jmp 0x800049f", "call 0x8000469", "mov edi eax", "call 0x8000470", "mov rbx rax", "mov edx 5", "mov esi 0", "mov edi 0", "call 0x8000487", "mov rdx rbx", "mov rsi rbp", "mov rdi rax", "mov eax 0", "call 0x800049a", "mov eax 0", "pop rbx", "pop rbp", "pop r12", "ret"], "opt": "L", "compiler": "gcc"}
{"instructions": ["xor edx edx", "cmp rdi rsi", "mov eax 0xffffffff", "seta dl", "cmovae eax edx", "ret"], "opt": "H", "compiler": "gcc"}
{"instructions": ["mov eax dword [arg_784h]", "add eax 3", "mov edi eax", "call sym.getIByte", "mov byte [arg_65fh] al", "movzx eax byte [arg_65fh]", "mov edi eax", "call sym.epartIsReg", "test al al", "je 0x8021c22", "movzx eax byte [arg_65fh]", "mov edi eax", "call sym.eregOfRM", "mov edi eax", "call sym.getXMMReg", "mov rbx rax", "movzx eax byte [arg_65fh]", "mov edi eax", "call sym.gregOfRM", "mov rsi rbx", "mov edi eax", "call sym.putXMMReg", "mov eax dword [0x08021bc8]", "and eax 0x80", "test eax eax", "je 0x8021c15", "movzx eax byte [arg_65fh]", "mov edi eax", "call sym.gregOfRM", "mov edi eax", "call sym.nameXMMReg", "mov rbx rax", "movzx eax byte [arg_65fh]", "mov edi eax", "call sym.eregOfRM", "mov edi eax", "call sym.nameXMMReg", "mov rdx rbx", "mov rsi rax", "mov edi 0", "mov eax 0", "call 0x8021c15", "add dword [arg_784h] 4", "jmp 0x803699b", "mov eax dword [arg_784h]", "lea edi [rax + 3]", "movzx esi byte [arg_77fh]", "lea rdx [arg_180h]", "lea rax [arg_1bch]", "mov rcx rdx", "mov edx edi", "mov rdi rax", "call sym.disAMode", "mov dword [arg_674h] eax", "mov eax dword [arg_674h]", "mov edi eax", "call sym.mkexpr", "mov rsi rax", "mov edi 0x110e", "call sym.loadLE", "mov rbx rax", "movzx eax byte [arg_65fh]", "mov edi eax", "call sym.gregOfRM", "mov rsi rbx", "mov edi eax", "call sym.putXMMReg", "mov eax dword [0x08021c95]", "and eax 0x80", "test eax eax", "je 0x8021cd1", "movzx eax byte [arg_65fh]", "mov edi eax", "call sym.gregOfRM", "mov edi eax", "call sym.nameXMMReg", "mov rdx rax", "lea rax [arg_180h]", "mov rsi rax", "mov edi 0", "mov eax 0", "call 0x8021cd1", "mov eax dword [arg_1bch]", "add eax 3", "add dword [arg_784h] eax", "jmp 0x803699b", "mov eax dword [local_164h]", "cmp eax 0x11", "je 0x80369ba", "cmp eax 0x11", "ja 0x80369b3", "cmp eax 0x10", "je 0x8036a26", "jmp 0x8036a0d", "cmp eax 0x13", "ja 0x8036a0d", "jmp 0x80369e7", "mov edx dword [0x080369c0]", "mov eax dword [local_784h]", "add eax edx", "mov edi eax", "call sym.mkU32", "mov rsi rax", "mov edi 0x44", "call 0x80369dd", "mov rdi rax", "call sym.stmt", "jmp 0x8036a27", "mov rax qword [local_170h]", "mov edi eax", "call sym.mkU32", "mov rsi rax", "mov edi 0x44", "call 0x8036a03", "mov rdi rax", "call sym.stmt", "jmp 0x8036a27", "mov ecx 0", "mov edx 0x3c64", "mov esi 0", "mov edi 0", "call 0x8036a26", "nop", "mov eax dword [0x08036a2d]", "and eax 0x80", "test eax eax", "je 0x8036a45", "mov edi 0", "mov eax 0", "call 0x8036a45", "mov eax dword [local_684h]", "mov edx dword [local_784h]", "mov ecx edx", "sub ecx eax", "mov eax ecx", "mov dword [local_160h] eax", "mov rax qword [local_48h]", "mov rdx qword [local_160h]", "mov qword [rax] rdx", "mov rdx qword [local_168h]", "mov qword [rax + 8] rdx", "mov rdx qword [local_170h]", "mov qword [rax + 0x10] rdx", "mov rax qword [local_48h]", "add rsp 0x7a8", "pop rbx", "pop rbp", "pop r12", "pop r13", "ret"], "opt": "L", "compiler": "gcc"}
{"instructions": ["push rbp", "mov rbp rsi", "push rbx", "mov rbx rdi", "sub rsp 0x18", "test edx edx", "mov rdi qword [rdi + 0x48]", "jne 0x8000a80", "test rsi rsi", "jne 0x8000a80", "test rdi rdi", "je 0x8000ab8", "mov rsi rbp", "call 0x8000a66", "cmp eax 1", "sbb eax eax", "not eax", "and eax 2", "add rsp 0x18", "pop rbx", "pop rbp", "ret", "test rdi rdi", "mov rax qword [rbx + 0x20]", "jne 0x8000a5e", "lea rsi [0x08000a90]", "mov rdi rax", "mov dword [local_ch] edx", "call 0x8000a9c", "test rax rax", "mov rdi rax", "mov qword [rbx + 0x48] rax", "mov edx dword [local_ch]", "jne 0x8000a5e", "mov eax 1", "jmp 0x8000a70", "xor eax eax", "jmp 0x8000a70"], "opt": "H", "compiler": "gcc"}
{"instructions": ["push rbx", "sub rsp 0xf0", "mov qword [local_e8h] rdi", "mov dword [local_e4h] esi", "mov dword [local_e0h] edx", "mov rax qword [local_e8h]", "mov rax qword [rax + 0x18]", "mov qword [local_d8h] rax", "mov rax qword [local_e8h]", "mov rax qword [rax + 0x20]", "mov qword [local_d0h] rax", "mov rax qword [local_d0h]", "mov qword [local_78h] rax", "mov qword [local_70h] 0", "mov rax qword [local_70h]", "movzx edx byte [rax]", "mov rax qword [local_70h]", "inc rax", "movzx eax byte [rax]", "shl eax 8", "or edx eax", "mov rax qword [local_70h]", "add rax 2", "movzx eax byte [rax]", "shl eax 0x10", "or edx eax", "mov rax qword [local_70h]", "add rax 3", "movzx eax byte [rax]", "shl eax 0x18", "mov esi edx", "or esi eax", "mov rdi qword [local_78h]", "call 0x8000180", "mov rdi qword [local_d0h]", "mov esi 0x12", "call 0x8000192", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x80001a4", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x80001b6", "mov rax qword [local_e8h]", "mov esi dword [rax + 0x2c]", "add esi 4", "mov rdi qword [local_d0h]", "call 0x80001d1", "mov rax qword [local_d0h]", "mov qword [local_70h] rax", "mov qword [local_78h] 0", "mov rax qword [local_78h]", "movzx edx byte [rax]", "mov rax qword [local_78h]", "inc rax", "movzx eax byte [rax]", "shl eax 8", "or edx eax", "mov rax qword [local_78h]", "add rax 2", "movzx eax byte [rax]", "shl eax 0x10", "or edx eax", "mov rax qword [local_78h]", "add rax 3", "movzx eax byte [rax]", "shl eax 0x18", "mov esi edx", "or esi eax", "mov rdi qword [local_70h]", "call 0x800022d", "mov rdi qword [local_d0h]", "mov esi 0x32", "call 0x800023f", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8000251", "mov dword [local_ach] 0", "mov dword [local_b0h] 0", "mov dword [local_b4h] 0", "mov dword [local_9ch] 0", "mov dword [local_94h] 0", "mov dword [local_a0h] 0", "mov rdx qword [local_e8h]", "mov eax dword [local_a0h]", "cmp eax dword [rdx + 0x2c]", "jae 0x800038b", "mov eax dword [local_a0h]", "movsxd rdx eax", "mov rax rdx", "add rax rax", "add rax rdx", "shl rax 4", "add rax qword [local_d8h]", "mov qword [local_70h] rax", "mov rax qword [local_70h]", "mov edx dword [rax + 0xc]", "lea rax [local_9ch]", "add dword [rax] edx", "mov rax qword [local_70h]", "mov eax dword [rax + 8]", "cmp eax dword [local_ach]", "jle 0x8000301", "mov rax qword [local_70h]", "mov eax dword [rax + 8]", "mov dword [local_ach] eax", "mov rax qword [local_70h]", "mov edx dword [rax]", "lea rax [local_b4h]", "add dword [rax] edx", "mov rax qword [local_70h]", "mov edx dword [rax + 4]", "lea rax [local_b0h]", "add dword [rax] edx", "mov rdx qword [local_70h]", "mov dword [local_60h] 0x3e8", "mov dword [local_64h] 1", "mov rax qword [local_70h]", "mov eax dword [rax + 0x1c]", "movsxd rdi eax", "mov rdx qword [rdx + 0x10]", "mov rsi qword [local_60h]", "mov ecx 0", "call 0x8000357", "mov dword [local_98h] eax", "mov eax dword [local_98h]", "cmp eax dword [local_94h]", "jle 0x800037c", "mov eax dword [local_98h]", "mov dword [local_94h] eax", "lea rax [local_a0h]", "inc dword [rax]", "jmp 0x8000293", "mov esi dword [local_9ch]", "mov rdi qword [local_d0h]", "call 0x800039f", "mov esi dword [local_9ch]", "mov rdi qword [local_d0h]", "call 0x80003b3", "mov esi dword [local_ach]", "mov rdi qword [local_d0h]", "call 0x80003c7", "cmp dword [local_b4h] 0", "jle 0x8000400", "mov edx dword [local_b0h]", "lea rax [local_b4h]", "mov qword [local_8h] rax", "mov eax edx", "mov rcx qword [local_8h]", "cdq", "idiv dword [rcx]", "mov dword [local_1ch] eax", "mov eax dword [local_1ch]", "mov dword [local_a4h] eax", "jmp 0x800040b", "mov dword [local_a4h] 0", "mov esi dword [local_a4h]", "mov rdi qword [local_d0h]", "call 0x800041f", "mov esi dword [local_b4h]", "mov rdi qword [local_d0h]", "call 0x8000433", "mov esi dword [local_94h]", "mov rdi qword [local_d0h]", "call 0x8000447", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8000459", "mov esi dword [local_e0h]", "mov rdi qword [local_d0h]", "call 0x800046d", "mov rax qword [local_d0h]", "mov qword [local_70h] rax", "mov rdi qword [local_70h]", "mov edx 1", "mov esi 0", "call 0x800048e", "mov qword [local_78h] rax", "mov rax qword [local_78h]", "mov dword [local_8ch] eax", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x80004b1", "mov rax qword [local_e8h]", "mov esi dword [rax + 0x2c]", "mov rdi qword [local_d0h]", "call 0x80004c9", "mov dword [local_90h] 3", "mov rax qword [local_d0h]", "mov eax dword [rax + 0x90]", "and eax 1", "test eax eax", "jne 0x80004f4", "lea rax [local_90h]", "or dword [rax] 4", "mov esi dword [local_90h]", "mov rdi qword [local_d0h]", "call 0x8000508", "mov rax qword [local_d0h]", "mov qword [local_70h] rax", "mov qword [local_78h] 0", "mov rax qword [local_78h]", "movzx edx byte [rax]", "mov rax qword [local_78h]", "inc rax", "movzx eax byte [rax]", "shl eax 8", "or edx eax", "mov rax qword [local_78h]", "add rax 2", "movzx eax byte [rax]", "shl eax 0x10", "or edx eax", "mov rax qword [local_78h]", "add rax 3", "movzx eax byte [rax]", "shl eax 0x18", "mov esi edx", "or esi eax", "mov rdi qword [local_70h]", "call 0x8000564", "mov dword [local_a8h] 0x12", "mov dword [local_a0h] 0", "cmp dword [local_a0h] 3", "ja 0x80005f0", "mov eax dword [local_a0h]", "cdqe", "mov rsi qword [rax*8]", "mov rax qword [local_e8h]", "mov rdi qword [rax + 0x4b0]", "mov ecx 0", "mov edx 0", "call 0x80005b3", "mov qword [local_80h] rax", "cmp qword [local_80h] 0", "je 0x80005e4", "mov rax qword [local_80h]", "mov rdi qword [rax + 8]", "call 0x80005d7", "mov rdx rax", "lea rax [local_a8h]", "add dword [rax] edx", "lea rax [local_a0h]", "inc dword [rax]", "jmp 0x800057a", "mov esi dword [local_a8h]", "mov rdi qword [local_d0h]", "call 0x8000604", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8000616", "mov dword [local_a0h] 0", "cmp dword [local_a0h] 3", "ja 0x80006aa", "mov eax dword [local_a0h]", "cdqe", "mov rsi qword [rax*8]", "mov rax qword [local_e8h]", "mov rdi qword [rax + 0x4b0]", "mov ecx 0", "mov edx 0", "call 0x800065a", "mov qword [local_80h] rax", "cmp qword [local_80h] 0", "je 0x8000680", "mov rax qword [local_80h]", "mov rax qword [rax + 8]", "mov qword [local_40h] rax", "jmp 0x8000689", "mov qword [local_40h] 0", "mov rdi qword [local_d0h]", "mov rsi qword [local_40h]", "call entry0", "lea rax [local_a0h]", "inc dword [rax]", "jmp 0x8000621", "mov dword [local_a0h] 0", "mov rdx qword [local_e8h]", "mov eax dword [local_a0h]", "cmp eax dword [rdx + 0x2c]", "jae 0x8001031", "mov eax dword [local_a0h]", "movsxd rdx eax", "mov rax rdx", "add rax rax", "add rax rdx", "shl rax 4", "add rax qword [local_d8h]", "mov qword [local_c8h] rax", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "cmp dword [rax] 1", "jne 0x8000727", "mov qword [local_c0h] 0", "mov qword [local_b8h] 0", "mov dword [local_5ch] 0x49", "jmp 0x8000747", "mov qword [local_c0h] 0", "mov qword [local_b8h] 0", "mov dword [local_5ch] 0x22", "mov rax qword [local_d0h]", "mov qword [local_70h] rax", "mov qword [local_78h] 0", "mov rax qword [local_78h]", "movzx edx byte [rax]", "mov rax qword [local_78h]", "inc rax", "movzx eax byte [rax]", "shl eax 8", "or edx eax", "mov rax qword [local_78h]", "add rax 2", "movzx eax byte [rax]", "shl eax 0x10", "or edx eax", "mov rax qword [local_78h]", "add rax 3", "movzx eax byte [rax]", "shl eax 0x18", "mov esi edx", "or esi eax", "mov rdi qword [local_70h]", "call 0x80007a3", "mov rdi qword [local_c0h]", "call 0x80007b0", "mov rbx rax", "mov rdi qword [local_b8h]", "call 0x80007c0", "lea eax [rbx + rax]", "add eax dword [local_5ch]", "add eax 0x2e", "mov dword [local_a8h] eax", "mov esi dword [local_a8h]", "mov rdi qword [local_d0h]", "call 0x80007e5", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x80007f7", "mov esi dword [local_a0h]", "mov rdi qword [local_d0h]", "call 0x800080b", "mov rax qword [local_c8h]", "mov esi dword [rax + 0xc]", "mov rdi qword [local_d0h]", "call 0x8000823", "mov rax qword [local_c8h]", "mov esi dword [rax + 0xc]", "mov rdi qword [local_d0h]", "call 0x800083b", "mov rax qword [local_c8h]", "mov esi dword [rax + 8]", "mov rdi qword [local_d0h]", "call 0x8000853", "mov rax qword [local_c8h]", "cmp dword [rax] 0", "jle 0x8000889", "mov rax qword [local_c8h]", "mov rdx qword [local_c8h]", "mov qword [local_10h] rdx", "mov eax dword [rax + 4]", "mov rcx qword [local_10h]", "cdq", "idiv dword [rcx]", "mov dword [local_a4h] eax", "jmp 0x8000894", "mov dword [local_a4h] 0", "mov esi dword [local_a4h]", "mov rdi qword [local_d0h]", "call 0x80008a8", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x80008ba", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x80008cc", "mov rax qword [local_d0h]", "mov eax dword [rax + 0x90]", "and eax 1", "test eax eax", "je 0x80008ef", "mov rax qword [local_c8h]", "cmp dword [rax + 0x1c] 0", "jne 0x8000903", "mov rdi qword [local_d0h]", "mov esi 0x36ee80", "call 0x8000901", "jmp 0x800094b", "mov rdx qword [local_c8h]", "mov dword [local_60h] 0x3e8", "mov dword [local_64h] 1", "mov rax qword [local_c8h]", "mov eax dword [rax + 0x1c]", "movsxd rdi eax", "mov rdx qword [rdx + 0x10]", "mov rsi qword [local_60h]", "mov ecx 0", "call 0x800093c", "mov rdi qword [local_d0h]", "mov esi eax", "call 0x800094b", "mov rsi qword [local_c0h]", "mov rdi qword [local_d0h]", "call sym.put_str8", "mov rsi qword [local_b8h]", "mov rdi qword [local_d0h]", "call sym.put_str8", "mov esi dword [local_5ch]", "mov rdi qword [local_d0h]", "call 0x8000986", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "cmp dword [rax] 1", "jne 0x8000d6e", "mov rax qword [local_c8h]", "mov rdi qword [rax + 0x28]", "mov esi 0", "call 0x80009b1", "mov dword [local_4ch] eax", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "mov eax dword [rax + 0x74]", "mov dword [local_50h] eax", "mov rax qword [local_c8h]", "mov rdx qword [rax + 0x28]", "mov eax dword [local_4ch]", "cdqe", "mov rdx qword [rdx + 0x20]", "imul rdx rax", "mov eax dword [local_50h]", "shl eax 3", "cdqe", "mov qword [local_8h] rax", "mov rax rdx", "cqo", "idiv qword [local_8h]", "mov qword [local_8h] rax", "mov edx dword [local_8h]", "mov dword [local_58h] edx", "mov rdi qword [local_d0h]", "mov edx 3", "mov esi 0", "call 0x8000a1e", "mov rdi qword [local_d0h]", "mov esi 0xfd", "call 0x8000a30", "mov rdi qword [local_d0h]", "mov esi 0x40000", "call 0x8000a42", "mov rax qword [local_d0h]", "mov qword [local_70h] rax", "mov qword [local_78h] 0", "mov rax qword [local_78h]", "movzx edx byte [rax]", "mov rax qword [local_78h]", "inc rax", "movzx eax byte [rax]", "shl eax 8", "or edx eax", "mov rax qword [local_78h]", "add rax 2", "movzx eax byte [rax]", "shl eax 0x10", "or edx eax", "mov rax qword [local_78h]", "add rax 3", "movzx eax byte [rax]", "shl eax 0x18", "mov esi edx", "or esi eax", "mov rdi qword [local_70h]", "call 0x8000a9e", "mov rdi qword [local_d0h]", "mov esi 0x1b53530", "call 0x8000ab0", "mov rdi qword [local_d0h]", "mov esi 4", "call 0x8000ac2", "mov rdi qword [local_d0h]", "mov esi 0x39", "call 0x8000ad4", "mov ecx dword [local_50h]", "mov dword [local_3ch] ecx", "cmp dword [local_3ch] 0x3e80", "je 0x8000b46", "cmp dword [local_3ch] 0x3e80", "jg 0x8000b06", "cmp dword [local_3ch] 0x1f40", "je 0x8000b46", "cmp dword [local_3ch] 0x2ee0", "je 0x8000b32", "jmp 0x8000b3c", "cmp dword [local_3ch] 0x7d00", "je 0x8000b46", "cmp dword [local_3ch] 0x7d00", "jg 0x8000b26", "cmp dword [local_3ch] 0x5dc0", "je 0x8000b32", "jmp 0x8000b3c", "cmp dword [local_3ch] 0xbb80", "je 0x8000b32", "jmp 0x8000b3c", "mov dword [local_54h] 1", "jmp 0x8000b4e", "mov dword [local_54h] 2", "jmp 0x8000b4e", "mov dword [local_54h] 3", "mov esi dword [local_54h]", "mov rdi qword [local_d0h]", "call 0x8000b5f", "cmp dword [local_58h] 0x22d", "jne 0x8000b70", "lea rax [local_58h]", "dec dword [rax]", "mov esi dword [local_58h]", "mov rdi qword [local_d0h]", "call 0x8000b81", "mov rdi qword [local_d0h]", "mov esi 0x51540", "call 0x8000b93", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "mov rax qword [rax + 0x20]", "mov qword [local_30h] rax", "cmp qword [local_30h] 0", "jns 0x8000bb6", "add qword [local_30h] 7", "mov rdx qword [local_30h]", "sar rdx 3", "mov rax rdx", "shl rax 4", "sub rax rdx", "shl rax 2", "mov rdi qword [local_d0h]", "mov esi eax", "call 0x8000bdc", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "mov rax qword [rax + 0x20]", "mov qword [local_28h] rax", "cmp qword [local_28h] 0", "jns 0x8000bff", "add qword [local_28h] 7", "mov rdx qword [local_28h]", "sar rdx 3", "mov rax rdx", "shl rax 4", "sub rax rdx", "shl rax 2", "mov rdi qword [local_d0h]", "mov esi eax", "call 0x8000c25", "mov rdi qword [local_d0h]", "mov esi 1", "call 0x8000c37", "mov esi dword [local_58h]", "mov rdi qword [local_d0h]", "call 0x8000c48", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8000c5a", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "mov esi dword [rax + 0x74]", "mov rdi qword [local_d0h]", "call 0x8000c76", "mov rdi qword [local_d0h]", "mov esi 0x10", "call 0x8000c88", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "mov esi dword [rax + 0x70]", "mov rdi qword [local_d0h]", "call 0x8000ca4", "mov rdi qword [local_d0h]", "mov esi 0", "call sym.put_str8", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "cmp dword [rax + 8] 0", "je 0x8000cf8", "mov rdi qword [local_d0h]", "mov esi 4", "call 0x8000cda", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "mov esi dword [rax + 8]", "mov rdi qword [local_d0h]", "call 0x8000cf6", "jmp 0x8000d21", "mov rdi qword [local_e8h]", "mov edx 0", "mov esi 0x10", "mov eax 0", "call 0x8000d14", "mov dword [local_48h] 0xffffffff", "jmp 0x8001173", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8000d33", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8000d45", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8000d57", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8000d69", "jmp 0x8001022", "mov rdi qword [local_d0h]", "mov esi 0x22", "call 0x8000d80", "mov rax qword [local_d0h]", "mov qword [local_70h] rax", "mov qword [local_78h] 0", "mov rax qword [local_78h]", "movzx edx byte [rax]", "mov rax qword [local_78h]", "inc rax", "movzx eax byte [rax]", "shl eax 8", "or edx eax", "mov rax qword [local_78h]", "add rax 2", "movzx eax byte [rax]", "shl eax 0x10", "or edx eax", "mov rax qword [local_78h]", "add rax 3", "movzx eax byte [rax]", "shl eax 0x18", "mov esi edx", "or esi eax", "mov rdi qword [local_70h]", "call 0x8000ddc", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "cmp dword [rax + 4] 5", "jne 0x8000e4c", "mov rax qword [local_d0h]", "mov qword [local_70h] rax", "mov qword [local_78h] 0", "mov rax qword [local_78h]", "movzx edx byte [rax]", "mov rax qword [local_78h]", "inc rax", "movzx eax byte [rax]", "shl eax 8", "or edx eax", "mov rax qword [local_78h]", "add rax 2", "movzx eax byte [rax]", "shl eax 0x10", "or edx eax", "mov rax qword [local_78h]", "add rax 3", "movzx eax byte [rax]", "shl eax 0x18", "mov esi edx", "or esi eax", "mov rdi qword [local_70h]", "call 0x8000e4a", "jmp 0x8000ea8", "mov rax qword [local_d0h]", "mov qword [local_70h] rax", "mov qword [local_78h] 0", "mov rax qword [local_78h]", "movzx edx byte [rax]", "mov rax qword [local_78h]", "inc rax", "movzx eax byte [rax]", "shl eax 8", "or edx eax", "mov rax qword [local_78h]", "add rax 2", "movzx eax byte [rax]", "shl eax 0x10", "or edx eax", "mov rax qword [local_78h]", "add rax 3", "movzx eax byte [rax]", "shl eax 0x18", "mov esi edx", "or esi eax", "mov rdi qword [local_70h]", "call 0x8000ea8", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "mov esi dword [rax + 0x38]", "mov rdi qword [local_d0h]", "call 0x8000ec4", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "mov esi dword [rax + 0x3c]", "mov rdi qword [local_d0h]", "call 0x8000ee0", "mov rax qword [local_c8h]", "mov rdx qword [local_c8h]", "mov qword [local_10h] rdx", "mov eax dword [rax + 0x10]", "mov rcx qword [local_10h]", "cdq", "idiv dword [rcx + 0x14]", "cmp eax 0xffff", "jle 0x8000f54", "mov rax qword [local_c8h]", "mov rdx qword [local_c8h]", "mov qword [local_10h] rdx", "mov eax dword [rax + 0x10]", "mov rcx qword [local_10h]", "cdq", "idiv dword [rcx + 0x14]", "mov rdi qword [local_d0h]", "mov ecx eax", "mov edx 0", "mov esi 0x10", "mov eax 0", "call 0x8000f47", "mov dword [local_48h] 0xffffffea", "jmp 0x8001173", "mov rax qword [local_c8h]", "mov rdx qword [local_c8h]", "mov qword [local_10h] rdx", "mov eax dword [rax + 0x10]", "mov rcx qword [local_10h]", "cdq", "idiv dword [rcx + 0x14]", "mov rdi qword [local_d0h]", "mov esi eax", "call 0x8000f84", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8000f96", "mov rax qword [local_c8h]", "mov rdx qword [local_c8h]", "mov qword [local_10h] rdx", "mov eax dword [rax + 0x10]", "mov rcx qword [local_10h]", "cdq", "idiv dword [rcx + 0x14]", "mov rdi qword [local_d0h]", "mov esi eax", "call 0x8000fc6", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8000fd8", "mov rdi qword [local_d0h]", "mov esi 8", "call 0x8000fea", "mov rax qword [local_c8h]", "mov rax qword [rax + 0x28]", "cmp dword [rax + 4] 5", "jne 0x8001010", "mov rdi qword [local_d0h]", "mov esi 0x10000000", "call 0x800100e", "jmp 0x8001022", "mov rdi qword [local_d0h]", "mov esi 0x20103001", "call 0x8001022", "lea rax [local_a0h]", "inc dword [rax]", "jmp 0x80006b5", "mov rbx qword [local_d8h]", "mov rax qword [local_d0h]", "mov qword [local_70h] rax", "mov rdi qword [local_70h]", "mov edx 1", "mov esi 0", "call 0x800105a", "mov qword [local_78h] rax", "mov rax qword [local_78h]", "mov dword [rbx + 0x70] eax", "mov eax dword [local_8ch]", "movsxd rsi eax", "mov rdi qword [local_d0h]", "mov edx 0", "call 0x8001083", "test rax rax", "js 0x80010c0", "mov rax qword [local_d8h]", "mov esi dword [rax + 0x70]", "mov rdi qword [local_d0h]", "call 0x80010a0", "mov rax qword [local_d8h]", "mov eax dword [rax + 0x70]", "movsxd rsi eax", "mov rdi qword [local_d0h]", "mov edx 0", "call 0x80010c0", "mov rax qword [local_d0h]", "mov qword [local_70h] rax", "mov qword [local_78h] 0", "mov rax qword [local_78h]", "movzx edx byte [rax]", "mov rax qword [local_78h]", "inc rax", "movzx eax byte [rax]", "shl eax 8", "or edx eax", "mov rax qword [local_78h]", "add rax 2", "movzx eax byte [rax]", "shl eax 0x10", "or edx eax", "mov rax qword [local_78h]", "add rax 3", "movzx eax byte [rax]", "shl eax 0x18", "mov esi edx", "or esi eax", "mov rdi qword [local_70h]", "call 0x800111c", "mov esi dword [local_e4h]", "add esi 0x12", "mov rdi qword [local_d0h]", "call 0x8001133", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x8001145", "mov esi dword [local_b4h]", "mov rdi qword [local_d0h]", "call 0x8001159", "mov rdi qword [local_d0h]", "mov esi 0", "call 0x800116b", "mov dword [local_48h] 0", "mov eax dword [local_48h]", "add rsp 0xf0", "pop rbx", "ret"], "opt": "L", "compiler": "gcc"}
{"instructions": ["push ebp", "push ebx", "push edi", "push esi", "sub esp 0xc", "mov esi ecx", "cmp dword [esi + 0x15c] 0", "je 0x8003dc7", "mov ecx esi", "call sub.vgModuleLocal_dinfo_zalloc_b40", "mov ecx dword [esi + 0x15c]", "cmp ecx 2", "jl 0x8003d31", "xor eax eax", "nop word [eax + eax]", "mov ecx dword [esi + 0x150]", "mov ebp dword [ecx + eax*8]", "mov edx dword [ecx + eax*8 + 4]", "mov edi edx", "and edi 0xfff", "add edi ebp", "mov ebx dword [ecx + eax*8 + 8]", "cmp edi ebx", "lea edi [eax + 1]", "jbe 0x8003d22", "add eax eax", "sub ebx ebp", "js 0x8003d08", "cmp ebx 0x1000", "jl 0x8003d10", "or edx 0xfff", "jmp 0x8003d1e", "and edx 0xfffff000", "jmp 0x8003d1e", "and ebx 0xfff", "and edx 0xfffff000", "or edx ebx", "mov dword [ecx + eax*4 + 4] edx", "mov ecx dword [esi + 0x15c]", "lea eax [ecx - 1]", "cmp edi eax", "mov eax edi", "jl 0x8003cd0", "test ecx ecx", "jle 0x8003dcf", "xor ebx ebx", "xor edi edi", "nop dword [eax]", "mov eax dword [esi + 0x150]", "movzx ecx word [eax + ebx*8 + 4]", "test cx 0xfff", "je 0x8003d7e", "cmp ebx edi", "je 0x8003d7d", "movsd xmm0 qword [eax + ebx*8]", "movsd qword [eax + edi*8] xmm0", "sub esp 8", "push ebx", "push esi", "call fcn.08000a10", "add esp 0x10", "sub esp 0xc", "mov ecx esi", "mov edx edi", "push eax", "call fcn.08004570", "add esp 0x10", "inc edi", "inc ebx", "cmp ebx dword [esi + 0x15c]", "jl 0x8003d40", "mov dword [esi + 0x15c] edi", "cmp edi 2", "jl 0x8003dd9", "dec edi", "mov eax dword [esi + 0x150]", "xor ecx ecx", "nop dword [eax + eax]", "mov ebx dword [eax + ecx*8 + 4]", "mov edx 0xfff", "and ebx edx", "je 0x8003de7", "mov ebp dword [eax + ecx*8]", "mov edx dword [eax + ecx*8 + 8]", "cmp ebp edx", "jae 0x8003e0d", "lea ebx [ebx + ebp - 1]", "cmp ebx edx", "jae 0x8003e33", "inc ecx", "cmp ecx edi", "jl 0x8003da0", "jmp 0x8003dd9", "add esp 0xc", "pop esi", "pop edi", "pop ebx", "pop ebp", "ret", "mov dword [esi + 0x15c] 0", "mov ecx esi", "add esp 0xc", "pop esi", "pop edi", "pop ebx", "pop ebp", "jmp 0x8004ca0", "sub esp 8", "push 0", "push 0", "push 0x803", "push 0", "push 0", "push 1", "call 0x8003e06", "add esp 8", "sub esp 8", "push 0", "push 0", "push 0x805", "push 0", "push 0", "push 1", "call 0x8003e2c", "add esp 8", "sub esp 8", "push 0", "push 0", "push 0x808", "push 0", "push 0", "push 1", "call 0x8003e52", "add esp 8", "nop dword [eax]"], "opt": "L", "compiler": "clang"}
{"instructions": ["push rbp", "push r15", "push r14", "push rbx", "sub rsp 0x38", "mov r14 rdi", "mov dword [local_ch] 0", "xor ebx ebx", "lea rcx [local_20h]", "mov esi 3", "xor edx edx", "call 0x8000808", "mov r15 rax", "mov rsi qword [local_20h]", "lea rdi [local_10h]", "mov rdx r15", "call sym.PACKET_buf_init", "test eax eax", "je 0x80009f4", "lea rdi [local_10h]", "lea rsi [local_ch]", "call sym.PACKET_get_1", "test eax eax", "je 0x80009f4", "cmp dword [local_ch] 0x16", "jne 0x80009f4", "lea rdi [local_10h]", "lea rsi [local_ch]", "call sym.PACKET_get_net_2", "test eax eax", "je 0x80009f4", "cmp dword [local_ch] 0x100", "jne 0x80009f4", "lea rdi [local_10h]", "mov esi 0xa", "call sym.PACKET_forward", "test eax eax", "je 0x80009f4", "lea rdi [local_10h]", "lea rsi [local_ch]", "call sym.PACKET_get_1", "test eax eax", "je 0x80009f4", "cmp dword [local_ch] 1", "jne 0x80009f4", "lea rdi [local_10h]", "mov esi 0xb", "call sym.PACKET_forward", "test eax eax", "je 0x80009f4", "lea rdi [local_10h]", "lea rsi [local_ch]", "call sym.PACKET_get_net_2", "test eax eax", "je 0x80009f4", "cmp dword [local_ch] 0x100", "jne 0x80009f4", "lea rdi [local_10h]", "call sym.PACKET_copy_bytes", "test eax eax", "je 0x80009f4", "lea rdi [local_10h]", "lea rsi [local_28h]", "call sym.PACKET_get_length_prefixed_1", "test eax eax", "je 0x80009f4", "lea rdi [local_28h]", "mov esi 0", "mov edx 0x20", "call sym.PACKET_equal", "test eax eax", "je 0x80009f4", "lea rdi [local_10h]", "lea rsi [local_28h]", "call sym.PACKET_get_length_prefixed_1", "test eax eax", "je 0x80009f4", "lea rdi [local_28h]", "call sym.PACKET_remaining", "test rax rax", "mov ebp 0", "je 0x8000974", "lea rdi [local_28h]", "mov esi 0", "mov edx 0x14", "call sym.PACKET_equal", "mov ebp 1", "xor ebx ebx", "test eax eax", "je 0x80009f4", "lea rdi [local_10h]", "lea rsi [local_ch]", "call sym.PACKET_get_net_2", "test eax eax", "je 0x80009f2", "mov esi dword [local_ch]", "lea rdi [local_10h]", "call sym.PACKET_forward", "test eax eax", "je 0x80009f2", "lea rdi [local_10h]", "lea rsi [local_ch]", "call sym.PACKET_get_1", "test eax eax", "je 0x80009f2", "mov esi dword [local_ch]", "lea rdi [local_10h]", "call sym.PACKET_forward", "test eax eax", "je 0x80009f2", "lea rdi [local_10h]", "lea rsi [local_ch]", "call sym.PACKET_get_net_2", "test eax eax", "je 0x80009f2", "mov esi dword [local_ch]", "lea rdi [local_10h]", "call sym.PACKET_forward", "test eax eax", "je 0x80009f2", "lea rdi [local_10h]", "call sym.PACKET_remaining", "test rax rax", "je 0x8000a01", "xor ebx ebx", "mov eax ebx", "add rsp 0x38", "pop rbx", "pop r14", "pop r15", "pop rbp", "ret", "test ebp ebp", "je 0x8000a2a", "mov rdi qword [0x08000a0c]", "mov rsi qword [local_20h]", "add rsi 0x19", "add r15 0xffffffffffffffe7", "mov rdx r15", "call 0x8000a21", "test eax eax", "mov ebx 0", "je 0x80009f4", "mov esi 1", "xor edx edx", "xor ecx ecx", "mov rdi r14", "call 0x8000a3b", "inc ebp", "mov ebx ebp", "jmp 0x80009f4"], "opt": "L", "compiler": "clang"}
{"instructions": ["push r12", "push r13", "push r15", "push rbx", "push rbp", "mov rbp rdi", "test rbp rbp", "mov ecx 0", "mov r15 rdx", "mov r13 rsi", "cmove rbp rcx", "mov r12d 1", "mov rdx rbp", "mov rcx rdx", "and rdx 0xfffffffffffffff0", "pxor xmm0 xmm0", "pcmpeqb xmm0 xmmword [rdx]", "pmovmskb eax xmm0", "and ecx 0xf", "shr eax cl", "bsf eax eax", "jne 0x800063a", "mov rax rdx", "add rdx rcx", "call qword [0x0800063a]", "mov rbx rax", "test rbx rbx", "jbe 0x80006a4", "mov rdi rbp", "mov esi 0", "mov rdx rbx", "call 0x8000652", "test eax eax", "jne 0x800065f", "mov byte [r15] 1", "jmp 0x800071d", "mov rdi rbp", "mov esi 0", "mov rdx rbx", "call 0x800066f", "test eax eax", "jne 0x800067c", "mov byte [r15] 0", "jmp 0x800071d", "mov rdi rbp", "mov esi 0", "mov rdx rbx", "call 0x800068c", "test eax eax", "je 0x8000656", "mov rdi rbp", "mov esi 0", "mov rdx rbx", "call 0x80006a0", "test eax eax", "je 0x8000673", "mov ecx 2", "cmp rbx 2", "mov rdi rbp", "mov esi 0", "cmovb rbx rcx", "mov rdx rbx", "call 0x80006c1", "test eax eax", "je 0x8000656", "mov rdi rbp", "mov esi 0", "mov rdx rbx", "call 0x80006d5", "test eax eax", "je 0x8000673", "mov rdi rbp", "mov esi 0", "call 0x80006e6", "test eax eax", "je 0x8000656", "mov rdi rbp", "mov esi 0", "call 0x80006fb", "test eax eax", "je 0x8000673", "test r13 r13", "je 0x800071a", "mov edi 0", "mov rsi rbp", "mov rdx r13", "xor eax eax", "call 0x800071a", "xor r12d r12d", "mov eax r12d", "pop rbp", "pop rbx", "pop r15", "pop r13", "pop r12", "ret"], "opt": "H", "compiler": "icc"}
{"instructions": ["push rbx", "mov rbx rdi", "mov rdx rbx", "mov rcx rdx", "and rdx 0xfffffffffffffff0", "pxor xmm0 xmm0", "pcmpeqb xmm0 xmmword [rdx]", "pmovmskb eax xmm0", "and ecx 0xf", "shr eax cl", "bsf eax eax", "jne 0x8000327", "mov rax rdx", "add rdx rcx", "call 0x8000327", "lea rdi [rax*4 + 3]", "call 0x8000334", "mov byte [rax] 0x27", "lea rcx [rax + 1]", "test rbx rbx", "je 0x800036b", "mov sil byte [rbx]", "test sil sil", "je 0x800036b", "mov byte [rcx] sil", "inc rcx", "cmp sil 0x27", "jne 0x8000366", "mov sil 0x27", "mov byte [rcx] 0x5c", "mov byte [rcx + 1] sil", "mov byte [rcx + 2] sil", "add rcx 3", "inc rbx", "jne 0x8000340", "mov byte [rcx] 0x27", "mov byte [rcx + 1] 0", "pop rbx", "ret"], "opt": "H", "compiler": "icc"}
{"instructions": ["mov rdx qword [rsp + 0x10]", "lea rdi [rsp + 0x2b0]", "mov dword [rdi + 8] ecx", "lea rsi [rdi - 0xa8]", "mov qword [rsp + 0x30] r8", "call fcn.0800103d", "mov r8 qword [arg_30h]", "mov ecx dword [arg_2b8h]", "movsxd rbx eax", "test rbx rbx", "jg 0x8001057", "xor eax eax", "xor ebx ebx", "jmp 0x800106d", "cmp rbx 0x2c5", "ja 0x800106a", "movzx eax word [rbx*2]", "jmp 0x800106d", "push 2", "pop rax", "add ecx eax", "cmp ecx 0x17ae6", "ja 0x80010cf", "movsxd rcx ecx", "movsx edx word [rcx*2]", "cmp edx eax", "jne 0x80010cf", "movsx r8d word [rcx*2]", "test r8d r8d", "jg 0x80010a6", "cmp r8d 0xfffff5f9", "je 0x8007de3", "neg r8d", "jmp 0x80010e1", "add r13 8", "push 0xfffffffffffffffe", "pop rbx", "mov rdx qword [arg_2b0h]", "movsxd r8 r8d", "mov qword [r13] rdx", "add r14 4", "mov edx dword [arg_208h]", "mov dword [r14] edx", "jmp 0x8007ab7", "movzx r8d word [r8*2]", "test r8d r8d", "je 0x8007de3", "movsxd r8 r8d", "mov qword [arg_2a8h] r8", "movzx r11d byte [r8]", "lea rdx [r11*8]", "neg rdx", "mov r10 qword [rdx + r13 + 8]", "test r11 r11", "jle 0x8001122", "lea rdx [r11*4]", "neg rdx", "add rdx r14", "mov r9d dword [rdx + 4]", "mov dword [arg_38h] r9d", "jmp 0x800112a", "mov dword [arg_38h] 0xffffffff", "cmp r8d 2", "je 0x8019f79", "cmp r8d 3", "je 0x8019f1a", "cmp r8d 4", "je 0x8019ee7", "cmp r8d 0x80", "je 0x8019f12", "cmp r8d 0x81", "je 0x8019ea9", "cmp r8d 0x82", "je 0x8007a38", "cmp r8d 0x83", "je 0x8007a38", "cmp r8d 0x84", "je 0x8007a38", "cmp r8d 0x85", "je 0x80195d1", "cmp r8d 0x86", "je 0x8019f12", "cmp r8d 0x87", "je 0x80195d1", "cmp r8d 0x88", "je 0x8019f12", "cmp r8d 0x89", "je 0x8019e7e", "cmp r8d 0x8a", "je 0x8019e65", "cmp r8d 0x8b", "je 0x8019e3a", "cmp r8d 0x8c", "je 0x8019dcc", "cmp r8d 0x8d", "je 0x8019da1", "cmp r8d 0x8e", "je 0x8019d76", "cmp r8d 0x8f", "je 0x8019d4b", "cmp r8d 0x90", "je 0x8019d30", "cmp r8d 0x91", "je 0x8019a0e", "cmp r8d 0x92", "je 0x800c13d", "cmp r8d 0x93", "je 0x80199e3", "cmp r8d 0x94", "je 0x80199c8", "cmp r8d 0x95", "je 0x8019d30", "cmp r8d 0x96", "je 0x80199ad", "cmp r8d 0x97", "je 0x80199ad", "cmp r8d 0x98", "je 0x801996f", "cmp r8d 0x99", "je 0x8019931", "cmp r8d 0x9a", "je 0x8019931", "cmp r8d 0x9b", "je 0x8019f12", "cmp r8d 0x9c", "je 0x800c13d", "cmp r8d 0x9d", "je 0x80198f3", "cmp r8d 0x9e", "je 0x80198b5", "cmp r8d 0x9f", "je 0x80198f3", "cmp r8d 0xa0", "je 0x80198b5", "cmp r8d 0xa1", "je 0x8019882", "cmp r8d 0xa2", "je 0x801984f", "cmp r8d 0xa3", "je 0x8019882", "cmp r8d 0xa4", "je 0x801981c", "cmp r8d 0xa5", "je 0x8019882", "cmp r8d 0xa6", "je 0x801984f", "cmp r8d 0xa7", "je 0x80197de", "cmp r8d 0xa8", "je 0x8019765", "cmp r8d 0xa9", "je 0x801974f", "cmp r8d 0xaa", "je 0x801973d", "cmp r8d 0xab", "je 0x80196fa", "cmp r8d 0xac", "je 0x80196b7", "cmp r8d 0xad", "je 0x801964f", "cmp r8d 0xae", "je 0x80195da", "cmp r8d 0xaf", "je 0x800c13d", "cmp r8d 0xb0", "je 0x8019f12", "cmp r8d 0xb1", "je 0x80195c3", "cmp r8d 0xb2", "je 0x8019f12", "cmp r8d 0xb9", "je 0x80195b5", "cmp r8d 0xba", "je 0x80195a7", "cmp r8d 0xbb", "je 0x80195b5", "mov r9 qword [arg_2a8h]", "lea r8 [r11*8]", "neg r8", "lea rdx [r11 + r11]", "shl r11 2", "neg rdx", "neg r11", "add r12 rdx", "movzx r9d word [r9*2]", "mov ecx dword [arg_38h]", "lea r13 [r13 + r8 + 8]", "mov qword [r13] r10", "movsx edx word [r9*2]", "lea r14 [r14 + r11 + 4]", "mov dword [r14] ecx", "movsx r8d word [r12]", "add edx r8d", "cmp edx 0x17ae6", "ja 0x8007aae", "movsxd rdx edx", "movsx ecx word [rdx*2]", "cmp ecx r8d", "jne 0x8007aae", "movsx r8 word [rdx*2]", "jmp 0x8007ab7", "movsx r8 word [r9*2]", "add r12 2", "mov word [r12] r8w", "cmp r15 r12", "ja 0x8007c62", "sub r12 rbp", "shr r12 1", "mov qword [arg_220h] r12", "cmp qword [arg_28h] 0x2710", "lea r13 [r12 + 1]", "jae 0x8007b2c", "mov r12 qword [arg_218h]", "mov edx 0x2710", "cmp r12 0x2710", "cmovbe rdx r12", "mov r12 rbp", "mov rdi rdx", "shl rdi 4", "sub rdi rdx", "sub rdi rdx", "add rdi 0xe", "mov qword [arg_28h] rdx", "mov qword [arg_30h] r8", "call 0x8007b22", "mov r8 qword [arg_30h]", "test rax rax", "jne 0x8007b3b", "mov edi 0", "mov rsi qword [arg_10h]", "call 0x8007b3b", "mov rdx qword [arg_220h]", "mov rdi rax", "mov rsi rbp", "lea rcx [rdx + rdx + 2]", "mov qword [arg_2c0h] rcx", "rep movsb byte [rdi] byte ptr [rsi]", "mov r9 qword [arg_28h]", "lea rcx [r13*8]", "mov rsi qword [arg_1e8h]", "mov rbp rax", "lea rdi [r9 + r9 + 7]", "and rdi 0xfffffffffffffff8", "lea rdx [r9 + r9]", "add rdi rax", "mov qword [arg_218h] rdx", "mov qword [arg_40h] rdi", "rep movsb byte [rdi] byte ptr [rsi]", "mov rdx qword [arg_28h]", "mov rdi qword [arg_40h]", "shl r13 2", "mov qword [arg_1e8h] rdi", "lea r9 [rdx*8 + 7]", "and r9 0xfffffffffffffff8", "mov rcx r13", "add rdi r9", "mov rsi qword [arg_210h]", "mov qword [arg_40h] rdi", "rep movsb byte [rdi] byte ptr [rsi]", "mov rdx qword [arg_40h]", "lea rcx [arg_48h]", "mov qword [rcx + 0x1c8] rdx", "cmp r12 rcx", "je 0x8007bfe", "mov rdi r12", "mov qword [arg_2c8h] rax", "mov qword [arg_30h] r8", "call 0x8007bf1", "mov r8 qword [arg_30h]", "mov rax qword [arg_2c8h]", "mov r12 qword [arg_2c0h]", "mov rcx qword [arg_28h]", "mov rdx qword [arg_220h]", "mov r13 qword [arg_1e8h]", "lea r12 [rax + r12 - 2]", "mov r14 qword [arg_40h]", "lea r15 [rax + rcx*2 - 2]", "lea r13 [r13 + rdx*8]", "lea r14 [r14 + rdx*4]", "cmp r15 r12", "ja 0x8007c62", "xor ebx ebx", "inc ebx", "lea rdx [arg_48h]", "cmp rbp rdx", "je 0x8007c4e", "mov rdi rbp", "call 0x8007c4e", "mov eax ebx", "add rsp 0xe18", "pop rbp", "pop rbx", "pop r15", "pop r14", "pop r13", "pop r12", "ret", "cmp r8 0x310", "je 0x8007c8e", "mov ecx dword [r8*4]", "cmp ecx 0xffffed7b", "je 0x80010cf", "cmp rbx 0xfffffffffffffffe", "je 0x800101c", "jmp 0x800104c", "xor eax eax", "xor ebx ebx", "jmp 0x8007c3c", "mov edi 0", "jmp 0x8007b31", "mov r10 qword [r13]", "jmp 0x8007a38", "mov r11 qword [rsp]", "mov r10 rax", "mov dword [r10] 0x142", "mov rdx qword [r13]", "mov qword [r10 + 8] rdx", "jmp 0x8007a38", "mov rsi qword [r13]", "mov qword [rsp] r11", "call 0x80191a0", "jmp fcn.08007a31", "mov r10 qword [r13]", "mov byte [r10 + 0x18] 1", "jmp 0x8007a38", "mov r10 qword [r13]", "mov byte [r10 + 0x18] 0", "jmp 0x8007a38", "cmp dword [arg_38h] 0", "jge 0x80195d1", "mov edx dword [r14]", "mov dword [arg_38h] edx", "mov rdi qword [r13 - 8]", "jmp 0x8019193", "push 0x28", "pop rsi", "mov rdi qword [0x080195e4]", "mov qword [rsp] r11", "call 0x80195ed", "mov r11 qword [rsp]", "mov r10 rax", "mov dword [r10] 0x114", "mov rdx qword [r13 - 8]", "mov qword [r10 + 8] rdx", "mov qword [r10 + 0x10] 0", "cmp qword [r13] 0", "je 0x80196a5", "push 0x14", "pop rdi", "mov esi 0", "mov edx 0x530", "mov ecx 0", "xor r8d r8d", "call 0x8019630", "jmp 0x80196a1", "mov edi 0x440", "call 0x801963c", "mov ebx eax", "mov edi 0", "xor eax eax", "call 0x801964a", "jmp 0x8019d0f", "push 0x28", "pop rsi", "mov rdi qword [0x08019659]", "mov qword [rsp] r11", "call 0x8019662", "mov r11 qword [rsp]", "mov r10 rax", "mov dword [r10] 0x114", "mov rdx qword [r13 - 0x18]", "mov qword [r10 + 8] rdx", "mov r8 qword [r13 - 8]", "mov qword [r10 + 0x10] r8", "cmp qword [r13] 0", "je 0x80196a5", "push 0x14", "pop rdi", "mov esi 0", "mov edx 0x521", "mov ecx 0", "xor r8d r8d", "call 0x80196a1", "test al al", "jne 0x8019632", "mov qword [r10 + 0x18] 0", "mov byte [r10 + 0x20] 1", "jmp 0x8007a38", "push 0x28", "pop rsi", "mov rdi qword [0x080196c1]", "mov qword [rsp] r11", "call 0x80196ca", "mov r11 qword [rsp]", "mov r10 rax", "mov dword [r10] 0x114", "mov rdx qword [r13 - 8]", "mov qword [r10 + 8] rdx", "mov qword [r10 + 0x10] 0", "mov r8 qword [r13]", "mov qword [r10 + 0x18] r8", "mov byte [r10 + 0x20] 0", "jmp 0x8007a38", "push 0x28", "pop rsi", "mov rdi qword [0x08019704]", "mov qword [rsp] r11", "call 0x801970d", "mov r11 qword [rsp]", "mov r10 rax", "mov dword [r10] 0x114", "mov rdx qword [r13 - 0x18]", "mov qword [r10 + 8] rdx", "mov r8 qword [r13 - 8]", "mov qword [r10 + 0x10] r8", "mov r9 qword [r13]", "mov qword [r10 + 0x18] r9", "mov byte [r10 + 0x20] 0", "jmp 0x8007a38", "movabs rdx 0xffffffff", "or r10 rdx", "jmp 0x8007a38", "movabs rdx 0xffffffff00000000", "and rdx r10", "lea r10 [rdx + 1]", "jmp 0x8007a38", "push 0x20", "pop rsi", "mov rdi qword [0x0801976f]", "mov qword [rsp] r11", "call 0x8019778", "mov r11 qword [rsp]", "mov r10 rax", "mov edi 0", "mov qword [arg_8h] r10", "mov qword [rsp] r11", "mov dword [r10] 0x10e", "mov r8 qword [r13 - 0x18]", "mov qword [r10 + 8] r8", "mov r9d dword [r13 - 0x10]", "mov dword [r10 + 0x18] r9d", "mov rsi qword [r13]", "mov edx dword [r14]", "call 0x80197b0", "mov r11 qword [rsp]", "mov r10 qword [arg_8h]", "mov rdi rax", "xor esi esi", "mov qword [arg_8h] r10", "mov qword [rsp] r11", "call 0x80197cc", "mov r11 qword [rsp]", "mov r10 qword [arg_8h]", "mov qword [r10 + 0x10] rax", "jmp 0x8007a38", "push 0x18", "pop rsi", "mov rdi qword [0x080197e8]", "mov qword [rsp] r11", "call 0x80197f1", "mov r11 qword [rsp]", "mov r10 rax", "mov dword [r10] 0x10d", "mov dword [r10 + 4] 2", "mov rdx qword [r13 - 0x10]", "mov qword [r10 + 8] rdx", "mov r8 qword [r13]", "mov qword [r10 + 0x10] r8", "jmp 0x8007a38", "push 0x18", "pop rsi", "mov rdi qword [0x08019826]", "mov qword [rsp] r11", "call 0x801982f", "mov r11 qword [rsp]", "mov r10 rax", "mov dword [r10] 0x10f", "mov rdx qword [r13]", "mov qword [r10 + 8] rdx", "mov byte [r10 + 0x10] 1", "jmp 0x8007a38", "push 0x18", "pop rsi", "mov rdi qword [0x08019859]", "mov qword [rsp] r11", "call 0x8019862", "mov r11 qword [rsp]", "mov r10 rax", "mov dword [r10] 0x10f", "mov byte [r10 + 0x10] 1", "mov rdx qword [r13]", "mov qword [r10 + 8] rdx", "jmp 0x8007a38", "push 0x18", "pop rsi", "mov rdi qword [0x0801988c]", "mov qword [rsp] r11", "call 0x8019895", "mov r11 qword [rsp]", "mov r10 rax", "mov dword [r10] 0x10f", "mov byte [r10 + 0x10] 0", "mov rdx qword [r13]", "mov qword [r10 + 8] rdx", "jmp 0x8007a38", "push 0x20", "pop rsi", "mov rdi qword [0x080198bf]", "mov qword [rsp] r11", "call 0x80198c8", "mov r11 qword [rsp]", "mov r10 rax", "mov dword [r10] 0x117", "mov qword [r10 + 8] 0", "mov rdx qword [r13 - 8]", "mov qword [r10 + 0x10] rdx", "mov r8 qword [r13]", "mov qword [r10 + 0x18] r8", "jmp 0x8007a38", "push 0x20", "pop rsi", "mov rdi qword [0x080198fd]", "mov qword [rsp] r11", "call 0x8019906", "mov r11 qword [rsp]", "mov r10 rax", "mov dword [r10] 0x117", "mov rdx qword [r13 - 0x10]", "mov qword [r10 + 8] rdx", "mov r8 qword [r13 - 8]", "mov qword [r10 + 0x10] r8", "mov r9 qword [r13]", "mov qword [r10 + 0x18] r9", "jmp 0x8007a38", "push 0x20", "pop rsi", "mov rdi qword [0x0801993b]", "mov qword [rsp] r11", "call 0x8019944", "mov r11 qword [rsp]", "mov r10 rax", "mov dword [r10] 0x10e", "mov rdx qword [r13 - 0x10]", "mov qword [r10 + 8] rdx", "mov dword [r10 + 0x18] 1", "mov r8 qword [r13]", "mov qword [r10 + 0x10] r8", "jmp 0x8007a38", "push 0x18", "pop rsi", "mov rdi qword [0x08019979]", "mov qword [rsp] r11", "call 0x8019982", "mov r11 qword [rsp]", "mov r10 rax", "mov dword [r10] 0x10d", "mov dword [r10 + 4] 1", "mov rdx qword [r13 - 0x10]", "mov qword [r10 + 8] rdx", "mov r8 qword [r13]", "mov qword [r10 + 0x10] r8", "jmp 0x8007a38", "mov edi 0", "mov rsi qword [r13]", "mov edx dword [r14 - 8]", "mov qword [rsp] r11", "call 0x80199c3", "jmp fcn.08007a31", "mov edi 0", "mov rsi qword [r13]", "mov edx dword [r14 - 4]", "mov qword [rsp] r11", "call 0x80199de", "jmp fcn.08007a31", "movsxd rdi dword [r13]", "mov qword [rsp] r11", "call 0x80199f0", "mov r11 qword [rsp]", "mov edi 0", "mov rsi rax", "mov edx dword [r14 - 4]", "mov qword [rsp] r11", "call 0x8019a09", "jmp fcn.08007a31", "mov rdi qword [r13]", "mov esi 0", "mov qword [arg_18h] rdi", "mov qword [rsp] r11", "call 0x8019a25", "mov r11 qword [rsp]", "test eax eax", "jne 0x8019a3d", "xor edi edi", "inc rdi", "mov qword [rsp] r11", "call 0x8019a3b", "jmp 0x8019a63", "mov esi 0", "mov rdi qword [arg_18h]", "mov qword [rsp] r11", "call 0x8019a50", "mov r11 qword [rsp]", "test eax eax", "jne 0x8019a80", "xor edi edi", "mov qword [rsp] r11", "call 0x8019a63", "mov r11 qword [rsp]", "mov edi 0", "mov rsi rax", "mov edx dword [r14]", "mov qword [rsp] r11", "call 0x8019a7b", "jmp fcn.08007a31", "mov esi 0", "mov rdi qword [arg_18h]", "mov qword [rsp] r11", "call 0x8019a93", "mov r11 qword [rsp]", "test eax eax", "jne 0x8019aab", "xor edi edi", "inc rdi", "mov qword [rsp] r11", "call 0x8019aa9", "jmp 0x8019ad1", "mov esi 0", "mov rdi qword [arg_18h]", "mov qword [rsp] r11", "call 0x8019abe", "mov r11 qword [rsp]", "test eax eax", "jne 0x8019aee", "xor edi edi", "mov qword [rsp] r11", "call 0x8019ad1", "mov r11 qword [rsp]", "mov edi 0", "mov rsi rax", "mov edx dword [r14]", "mov qword [rsp] r11", "call 0x8019ae9", "jmp fcn.08007a31", "mov esi 0", "mov rdi qword [arg_18h]", "mov qword [rsp] r11", "call 0x8019b01", "mov r11 qword [rsp]", "test eax eax", "jne 0x8019b19", "xor edi edi", "inc rdi", "mov qword [rsp] r11", "call 0x8019b17", "jmp 0x8019b3f", "mov esi 0", "mov rdi qword [arg_18h]", "mov qword [rsp] r11", "call 0x8019b2c", "mov r11 qword [rsp]", "test eax eax", "jne 0x8019b5c", "xor edi edi", "mov qword [rsp] r11", "call 0x8019b3f", "mov r11 qword [rsp]", "mov edi 0", "mov rsi rax", "mov edx dword [r14]", "mov qword [rsp] r11", "call 0x8019b57", "jmp fcn.08007a31", "mov esi 0", "mov rdi qword [arg_18h]", "mov qword [rsp] r11", "call 0x8019b6f", "mov r11 qword [rsp]", "test eax eax", "jne 0x8019b87", "xor edi edi", "inc rdi", "mov qword [rsp] r11", "call 0x8019b85", "jmp 0x8019bad", "mov esi 0", "mov rdi qword [arg_18h]", "mov qword [rsp] r11", "call 0x8019b9a", "mov r11 qword [rsp]", "test eax eax", "jne 0x8019bca", "xor edi edi", "mov qword [rsp] r11", "call 0x8019bad", "mov r11 qword [rsp]", "mov edi 0", "mov rsi rax", "mov edx dword [r14]", "mov qword [rsp] r11", "call 0x8019bc5", "jmp fcn.08007a31", "mov esi 0", "mov rdi qword [arg_18h]", "mov qword [rsp] r11", "call 0x8019bdd", "mov r11 qword [rsp]", "test eax eax", "jne 0x8019bf5", "xor edi edi", "inc rdi", "mov qword [rsp] r11", "call 0x8019bf3", "jmp 0x8019c1b", "mov esi 0", "mov rdi qword [arg_18h]", "mov qword [rsp] r11", "call 0x8019c08", "mov r11 qword [rsp]", "test eax eax", "jne 0x8019c38", "xor edi edi", "mov qword [rsp] r11", "call 0x8019c1b", "mov r11 qword [rsp]", "mov edi 0", "mov rsi rax", "mov edx dword [r14]", "mov qword [rsp] r11", "call 0x8019c33", "jmp fcn.08007a31", "mov esi 0", "mov rdi qword [arg_18h]", "mov qword [rsp] r11", "call 0x8019c4b", "mov r11 qword [rsp]", "test eax eax", "jne 0x8019c63", "xor edi edi", "inc rdi", "mov qword [rsp] r11", "call 0x8019c61", "jmp 0x8019c89", "mov esi 0", "mov rdi qword [arg_18h]", "mov qword [rsp] r11", "call 0x8019c76", "mov r11 qword [rsp]", "test eax eax", "jne 0x8019ca6", "xor edi edi", "mov qword [rsp] r11", "call 0x8019c89", "mov r11 qword [rsp]", "mov edi 0", "mov rsi rax", "mov edx dword [r14]", "mov qword [rsp] r11", "call 0x8019ca1", "jmp fcn.08007a31", "mov esi 0", "mov rdi qword [arg_18h]", "mov qword [rsp] r11", "call 0x8019cb9", "mov r11 qword [rsp]", "test eax eax", "jne 0x8019cd1", "xor edi edi", "mov qword [rsp] r11", "call 0x8019ccc", "jmp 0x8019daf", "push 0x14", "pop rdi", "mov esi 0", "mov edx 0x42a", "mov ecx 0", "xor r8d r8d", "call 0x8019ceb", "test al al", "je 0x80196a5", "mov edi 0x1006084", "call 0x8019cfd", "mov ebx eax", "mov edi 0", "xor eax eax", "mov rsi qword [r13]", "call 0x8019d0f", "mov ebp eax", "mov edi dword [r14]", "mov rsi qword [arg_10h]", "call 0x8019d1e", "mov edi ebx", "mov esi ebp", "mov edx eax", "xor eax eax", "call 0x8019d2b", "jmp 0x80196a5", "mov edi 0", "mov rsi qword [r13]", "mov edx dword [r14 - 4]", "mov qword [rsp] r11", "call 0x8019d46", "jmp fcn.08007a31", "mov rdi qword [r13]", "mov qword [rsp] r11", "call 0x8019d58", "mov r11 qword [rsp]", "mov edi 0", "mov rsi rax", "mov edx dword [r14 - 8]", "mov qword [rsp] r11", "call 0x8019d71", "jmp fcn.08007a31", "movsxd rdi dword [r13]", "mov qword [rsp] r11", "call 0x8019d83", "mov r11 qword [rsp]", "mov edi 0", "mov rsi rax", "mov edx dword [r14 - 8]", "mov qword [rsp] r11", "call 0x8019d9c", "jmp fcn.08007a31", "xor edi edi", "inc rdi", "mov qword [rsp] r11", "call 0x8019daf", "mov r11 qword [rsp]", "mov edi 0", "mov rsi rax", "mov edx dword [r14]", "mov qword [rsp] r11", "call 0x8019dc7", "jmp fcn.08007a31", "push 0x14", "pop rdi", "mov esi 0", "mov edx 0x3ec", "mov ecx 0", "xor r8d r8d", "call 0x8019de6", "test al al", "je 0x80196a5", "mov edi 0x440", "call 0x8019df8", "mov ebx eax", "mov edi 0", "xor eax eax", "call 0x8019e06", "mov ebp eax", "mov edi 0", "xor eax eax", "call 0x8019e14", "mov r12d eax", "mov edi dword [r14 - 8]", "mov rsi qword [arg_10h]", "call 0x8019e25", "mov edi ebx", "mov esi ebp", "mov edx r12d", "mov ecx eax", "xor eax eax", "call 0x8019e35", "jmp 0x80196a5", "mov rdi qword [r13]", "mov qword [rsp] r11", "call 0x8019e47", "mov r11 qword [rsp]", "mov edi 0", "mov rsi rax", "mov edx dword [r14 - 8]", "mov qword [rsp] r11", "call 0x8019e60", "jmp fcn.08007a31", "mov edi 0", "xor esi esi", "mov edx dword [r14 - 4]", "mov qword [rsp] r11", "call 0x8019e79", "jmp fcn.08007a31", "mov rdi qword [r13]", "mov qword [rsp] r11", "call 0x8019e8b", "mov r11 qword [rsp]", "mov edi 0", "mov rsi rax", "mov edx dword [r14 - 4]", "mov qword [rsp] r11", "call 0x8019ea4", "jmp fcn.08007a31", "push 0x18", "pop rsi", "mov rdi qword [0x08019eb3]", "mov qword [rsp] r11", "call 0x8019ebc", "mov r11 qword [rsp]", "mov r10 rax", "mov dword [r10] 0x10d", "mov dword [r10 + 4] 0", "mov rdx qword [r13 - 0x10]", "mov qword [r10 + 8] rdx", "mov r8 qword [r13]", "mov qword [r10 + 0x10] r8", "jmp 0x8007a38", "mov rdi qword [r13]", "test rdi rdi", "je 0x8019f12", "xor esi esi", "mov qword [rsp] r11", "call 0x8019efb", "mov r11 qword [rsp]", "mov rdi rax", "xor esi esi", "mov qword [rsp] r11", "call 0x8019f0d", "jmp fcn.08007a31", "xor r10d r10d", "jmp 0x8007a38", "mov rdi qword [r13 - 0x10]", "test rdi rdi", "je 0x8019f48", "mov qword [rsp] r11", "call 0x8019f2c", "mov r11 qword [rsp]", "mov ecx dword [r14 - 4]", "mov r8 qword [rax]", "cmp dword [r8 + 0x14] 0", "jg 0x8019f48", "mov edx dword [r8 + 0x10]", "sub ecx edx", "mov dword [r8 + 0x14] ecx", "mov rdi qword [r13]", "test rdi rdi", "je 0x8019f70", "mov esi dword [r14 - 4]", "inc esi", "mov qword [rsp] r11", "call 0x8019f60", "mov r11 qword [rsp]", "mov rsi rax", "mov rdi qword [r13 - 0x10]", "jmp 0x8019197", "mov r10 qword [r13 - 0x10]", "jmp 0x8007a38", "mov rdx qword [arg_10h]", "mov r8 qword [r13]", "mov r9 qword [rdx]", "mov qword [r9 + 0x78] r8", "jmp 0x8007a38"], "opt": "L", "compiler": "icc"}
{"instructions": ["push r12", "push r13", "push r14", "push r15", "push rbx", "push rbp", "sub rsp 0x98", "mov r15 rsi", "mov r10 qword [rdi + 0x20]", "lea rdi [r15 + 0x8c]", "mov r14d dword [rdi]", "shl r14d 3", "mov eax dword [rdi - 4]", "mov edx dword [rdi + 4]", "mov r9 qword [rdi - 0xc]", "mov dword [local_70h] eax", "mov dword [local_68h] edx", "cmp r14d 0x7ffffdff", "jae 0x80006e7", "test r9 r9", "jne 0x80006ed", "xor r14d r14d", "xor r9d r9d", "xor r13d r13d", "add r14d 8", "xor r8d r8d", "xor eax eax", "xor ecx ecx", "test r8d r8d", "mov rbx qword [r10 + 0x10]", "setne cl", "xor r12d r12d", "mov edx dword [local_68h]", "movsxd rbp dword [rbx + rax*4 + 0x40]", "sar edx cl", "mov qword [local_40h] rbp", "imul edx ebp", "movsxd rbp edx", "mov esi dword [local_70h]", "sar esi cl", "add rbp qword [rbx + rax*8]", "mov dword [local_78h] esi", "test esi esi", "jle 0x8000e72", "xor ecx ecx", "test r8d r8d", "mov esi dword [r10 + 0x3c]", "setne cl", "sar esi cl", "xor ebx ebx", "test esi esi", "jle 0x8000e59", "mov esi r13d", "mov ecx r13d", "shr esi 3", "and ecx 7", "movzx r11d byte [rsi + r9]", "shl r11d cl", "cmp r13d r14d", "movzx r11d r11b", "lea ecx [r13 + 1]", "cmovl r13d ecx", "test r11d 0xffffff80", "je 0x8000788", "mov dword [r15 + 0x94] 1", "jmp 0x8000e3b", "mov rdi r15", "xor esi esi", "mov edx 0x80", "mov qword [rsp] rax", "mov dword [local_8h] r8d", "mov qword [local_58h] r9", "mov qword [local_60h] r10", "call 0x80007aa", "mov esi r13d", "mov ecx r13d", "shr esi 3", "and ecx 7", "mov r9 qword [local_58h]", "add r13d 7", "mov esi dword [rsi + r9]", "cmp r13d r14d", "mov r10 qword [local_60h]", "mov r8d dword [local_8h]", "cmovae r13d r14d", "mov rax qword [rsp]", "bswap esi", "shl esi cl", "shr esi 0xf9", "movsxd rsi esi", "cmp rsi 0x40", "jg 0x800089c", "xor edx edx", "test rsi rsi", "jle 0x80008ca", "mov r11d r13d", "mov ecx r13d", "shr r11d 3", "and ecx 7", "mov r11d dword [r11 + r9]", "bswap r11d", "shl r11d cl", "cmp r11d segment.ehdr", "jb 0x8000837", "shr r11d 0x17", "movzx ecx byte [r11]", "add r13d ecx", "cmp r13d r14d", "movsx r11d byte [r11]", "cmovae r13d r14d", "jmp 0x800088a", "or r11d 1", "bsr edi r11d", "sub r13d edi", "add r13d 0x1f", "cmp r13d r14d", "cmovae r13d r14d", "mov r11d r13d", "mov ecx r13d", "shr r11d 3", "and ecx 7", "sub r13d edi", "mov r11d dword [r11 + r9]", "add r13d 0x20", "bswap r11d", "cmp r13d r14d", "cmovae r13d r14d", "shl r11d cl", "mov ecx edi", "shr r11d cl", "mov edi r11d", "and edi 1", "mov ecx edi", "shr r11d 1", "neg ecx", "xor r11d ecx", "add r11d edi", "cmp r11d 0xfffff800", "jl 0x800089c", "cmp r11d 0x800", "jle 0x80008a6", "mov eax 0xbebbb1b7", "jmp 0x8000e84", "movzx ecx byte [rdx]", "inc rdx", "mov rdi qword [r10 + 0x30]", "movzx edi byte [rcx + rdi]", "imul edi r11d", "mov word [r15 + rcx*2] di", "cmp rdx rsi", "jl 0x80007f7", "mov dword [local_18h] r12d", "mov qword [local_20h] rbp", "mov qword [local_28h] rbx", "add rbx rbp", "movsx ebp word [r15 + 0x30]", "movsx r12d word [r15 + 0x50]", "imul r11d ebp 0x6a6e", "imul edx r12d 0x47e5", "imul esi ebp 0xffffb81b", "mov dword [local_8h] r8d", "add r11d edx", "movsx edx word [r15 + 0x70]", "movsx r8d word [r15 + 0x10]", "mov qword [rsp] rax", "lea rax [r15 + 2]", "mov qword [local_38h] rbx", "imul ebx edx 0x18f9", "imul ecx r8d 0x7d8b", "imul edx edx 0xffff8275", "mov dword [local_10h] r13d", "add ebx ecx", "mov qword [local_88h] rax", "imul r13d r12d 0x6a6e", "imul eax r8d 0x18f9", "add r13d esi", "add eax edx", "movsx esi word [r15 + 0x20]", "lea r12d [r11 + rbx + 0x800]", "sub ebx r11d", "movsx r11d word [r15 + 0x60]", "imul edi esi 0x4546", "lea ebp [r13 + rax + 0x800]", "imul r8d esi 0xa73e", "sub eax r13d", "imul r13d r11d 0xffff58c3", "add edi r13d", "imul r13d r11d 0x4546", "sar r12d 0xc", "add r13d r8d", "sar ebp 0xc", "movzx r11d word [r15]", "mov r8d r11d", "imul edx r12d 0x16a1", "imul ecx ebp 0x16a1", "movzx ebp word [r15 + 0x40]", "sub r8d ebp", "add r11d ebp", "lea esi [r13 + rdx]", "shl r8d 0xf", "shl r11d 0xf", "mov byte [local_50h] 1", "lea r12d [r8 + 0x21000]", "lea ebp [rsi + r11 + 0x21000]", "shr ebp 0xd", "lea esi [rbx + rax]", "mov word [r15] bp", "lea r8d [rdi + r8 + 0x21000]", "add esi r8d", "mov ebp ebx", "shr esi 0xd", "sub ebp eax", "mov word [r15 + 0x10] si", "mov esi edi", "sub esi r12d", "mov r8d ebp", "sub r8d esi", "add ebp esi", "shr r8d 0xd", "sub edi ebx", "mov word [r15 + 0x20] r8w", "mov r8d ecx", "add ecx r13d", "sub r8d r13d", "sub r13d edx", "neg ecx", "sub eax r12d", "neg ebp", "sub edi eax", "shr ebp 0xd", "lea r8d [r8 + r11 + 0x21000]", "shr r8d 0xd", "lea eax [r13 + r11 + 0x21000]", "shr eax 0xd", "lea ecx [rcx + r11 + 0x21000]", "lea rdx [r15 + 0x30]", "mov word [rdx] r8w", "shr ecx 0xd", "mov word [rdx + 0x20] bp", "shr edi 0xd", "mov word [rdx + 0x40] ax", "mov word [rdx + 0x10] cx", "mov word [rdx + 0x30] di", "mov rsi qword [local_88h]", "mov rbx qword [local_28h]", "mov rbp qword [local_20h]", "mov r12d dword [local_18h]", "mov rax qword [rsp]", "mov r8d dword [local_8h]", "mov r13d dword [local_10h]", "mov qword [rsp] rax", "movsx edx word [rsi + 0x30]", "movsx eax word [rsi + 0x50]", "mov dword [local_18h] r12d", "mov qword [local_28h] rbx", "imul r12d edx 0x6a6e", "imul ebx eax 0x47e5", "mov dword [local_8h] r8d", "add r12d ebx", "movsx ecx word [rsi + 0x70]", "movsx r8d word [rsi + 0x10]", "mov qword [local_20h] rbp", "imul ebx ecx 0x18f9", "imul ebp r8d 0x7d8b", "imul r11d ecx 0xffff8275", "mov dword [local_30h] r14d", "add ebx ebp", "mov dword [local_10h] r13d", "imul r14d eax 0x6a6e", "imul r13d edx 0xffffb81b", "imul eax r8d 0x18f9", "add r14d r13d", "add eax r11d", "movsx ebp word [rsi + 0x20]", "lea edx [r12 + rbx + 0x800]", "sub ebx r12d", "movsx r12d word [rsi + 0x60]", "imul edi ebp 0x4546", "lea r13d [r14 + rax + 0x800]", "imul r8d ebp 0xa73e", "sub eax r14d", "imul r14d r12d 0xffff58c3", "add edi r14d", "imul r14d r12d 0x4546", "sar edx 0xc", "add r14d r8d", "movzx r12d word [rsi]", "mov r11d r12d", "imul edx edx 0x16a1", "movzx ebp word [rsi + 0x40]", "sub r11d ebp", "add r12d ebp", "lea r8d [r14 + rdx]", "shl r11d 0xf", "shl r12d 0xf", "sar r13d 0xc", "imul ecx r13d 0x16a1", "lea r13d [r11 + 0x1000]", "lea ebp [r8 + r12 + 0x1000]", "shr ebp 0xd", "lea r8d [rbx + rax]", "mov word [rsi] bp", "lea r11d [rdi + r11 + 0x1000]", "add r8d r11d", "mov ebp ebx", "shr r8d 0xd", "sub ebp eax", "mov word [rsi + 0x10] r8w", "mov r8d edi", "sub r8d r13d", "mov r11d ebp", "sub r11d r8d", "add ebp r8d", "shr r11d 0xd", "sub edi ebx", "mov word [rsi + 0x20] r11w", "mov r11d ecx", "add ecx r14d", "sub r11d r14d", "neg ecx", "sub r14d edx", "sub eax r13d", "neg ebp", "sub edi eax", "mov bl byte [local_50h]", "lea r11d [r11 + r12 + 0x1000]", "inc bl", "lea ecx [rcx + r12 + 0x1000]", "shr r11d 0xd", "lea eax [r14 + r12 + 0x1000]", "shr ecx 0xd", "shr ebp 0xd", "shr edi 0xd", "shr eax 0xd", "mov word [rsi + 0x30] r11w", "mov word [rsi + 0x40] cx", "mov word [rsi + 0x50] bp", "mov word [rsi + 0x60] di", "mov word [rsi + 0x70] ax", "add rsi 2", "mov byte [local_50h] bl", "mov rbp qword [local_20h]", "mov r12d dword [local_18h]", "mov rax qword [rsp]", "mov r8d dword [local_8h]", "mov r13d dword [local_10h]", "mov r14d dword [local_30h]", "cmp bl 8", "mov rbx qword [local_28h]", "jl 0x8000a89", "mov rsi r15", "mov byte [local_48h] 0", "mov r11 rsi", "mov qword [rsp] rax", "movsx edx word [rsi + 6]", "movsx eax word [rsi + 0xa]", "mov dword [local_30h] r14d", "mov dword [local_10h] r13d", "imul r13d edx 0x6a6e", "imul r14d eax 0x47e5", "add r13d r14d", "imul r14d eax 0x6a6e", "imul eax edx 0xffffb81b", "mov qword [local_28h] rbx", "add r14d eax", "movsx ebx word [rsi + 0xe]", "movsx ecx word [rsi + 2]", "imul eax ebx 0x18f9", "imul edx ecx 0x7d8b", "add eax edx", "imul edx ecx 0x18f9", "imul ecx ebx 0xffff8275", "add edx ecx", "lea ecx [r13 + rax + 0x800]", "mov dword [local_18h] r12d", "sub eax r13d", "mov qword [local_80h] r11", "movsx r12d word [rsi + 4]", "movsx r11d word [rsi + 0xc]", "lea ebx [r14 + rdx + 0x800]", "imul r13d r11d 0xffff58c3", "sub edx r14d", "imul r14d r12d 0x4546", "add r14d r13d", "imul r13d r11d 0x4546", "imul r11d r12d 0xa73e", "sar ecx 0xc", "add r13d r11d", "imul ecx ecx 0x16a1", "movsx r12d word [rsi]", "mov r11d r12d", "mov qword [local_20h] rbp", "movsx ebp word [rsi + 8]", "sub r11d ebp", "shl r11d 0xf", "add r12d ebp", "shl r12d 0xf", "lea ebp [r13 + rcx]", "add ebp r12d", "sar ebp 0x14", "mov dword [local_8h] r8d", "lea r8d [rax + rdx]", "mov word [rsi] bp", "lea ebp [r14 + r11]", "sar ebx 0xc", "add r8d ebp", "imul ebx ebx 0x16a1", "mov ebp eax", "sar r8d 0x14", "sub ebp edx", "mov word [rsi + 2] r8w", "mov r8d r14d", "sub r8d r11d", "mov edi ebp", "sub edi r8d", "add ebp r8d", "sar edi 0x14", "sub r14d eax", "mov word [rsi + 4] di", "mov edi ebx", "add ebx r13d", "sub edi r13d", "neg ebx", "sub edx r11d", "sub r13d ecx", "add edi r12d", "add ebx r12d", "neg ebp", "sub r14d edx", "add r13d r12d", "mov al byte [local_48h]", "inc al", "sar edi 0x14", "sar ebx 0x14", "sar ebp 0x14", "sar r14d 0x14", "sar r13d 0x14", "mov word [rsi + 6] di", "mov word [rsi + 8] bx", "mov word [rsi + 0xa] bp", "mov word [rsi + 0xc] r14w", "mov word [rsi + 0xe] r13w", "add rsi 0x10", "mov byte [local_48h] al", "mov r11 qword [local_80h]", "mov rbx qword [local_28h]", "mov rbp qword [local_20h]", "mov r12d dword [local_18h]", "mov r8d dword [local_8h]", "mov r13d dword [local_10h]", "mov r14d dword [local_30h]", "cmp al 8", "mov rax qword [rsp]", "jl 0x8000c4f", "xor sil sil", "xor ecx ecx", "movsx edx word [r11 + rcx*2]", "mov edi edx", "not edi", "sar edi 0x1f", "test edx 0xffffff00", "cmovne edx edi", "mov rdi qword [local_38h]", "mov byte [rcx + rdi] dl", "inc rcx", "cmp rcx 8", "jl 0x8000dfb", "mov rcx rdi", "inc sil", "add rcx qword [local_40h]", "add r11 0x10", "mov qword [local_38h] rcx", "cmp sil 8", "jl 0x8000df9", "xor ecx ecx", "test r8d r8d", "mov esi dword [r10 + 0x3c]", "setne cl", "add rbx 8", "sar esi cl", "movsxd rsi esi", "cmp rbx rsi", "jl 0x800074c", "mov rcx qword [local_40h]", "add r12d 8", "lea rbp [rbp + rcx*8]", "cmp r12d dword [local_78h]", "jl 0x8000742", "inc r8d", "inc rax", "cmp r8d 3", "jl 0x80006f9", "xor eax eax", "add rsp 0x98", "pop rbp", "pop rbx", "pop r15", "pop r14", "pop r13", "pop r12", "ret"], "opt": "L", "compiler": "icc"}